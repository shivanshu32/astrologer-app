import React, { useState, useEffect, useRef, useCallback } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  FlatList,
  KeyboardAvoidingView,
  Platform,
  ActivityIndicator,
  StyleSheet,
  Alert
} from 'react-native';
import { useRoute, useNavigation, RouteProp } from '@react-navigation/native';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackParamList } from '../types/navigation';
import { chatService } from '../services/chatService';
import { formatDistanceToNow } from 'date-fns';
import { Ionicons } from '@expo/vector-icons';
import * as socketService from '../services/socketService';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';
import { API_URL } from '../config';
import { v4 as uuidv4 } from 'uuid';

interface Message {
  _id?: string;
  id?: string;  // Alternative ID property that might be in server response
  message: string;
  content?: string; // Alternative content property that might be used instead of message
  timestamp: Date | string | number;
  createdAt?: Date | string | number; // Alternative timestamp property
  senderType: 'user' | 'astrologer' | 'system';
  read?: boolean;
  sender?: string;
  status?: string;
  senderId?: string;
  receiverId?: string;
  messageType?: string;
  temporaryId?: string;
}

interface ChatData {
  _id: string;
  user: {
    name: string;
    mobileNumber: string;
    _id?: string;
  };
  booking: {
    _id?: string;
    consultationType: string;
    amount: number;
    status: string;
  };
  messages: Message[];
}

// Helper function to extract chat ID from response data
const extractChatId = (data: any): string | null => {
  if (!data) return null;
  
  // Check for chatId in different possible locations and ensure it's a string
  if (data.chatId && typeof data.chatId === 'string') return data.chatId;
  if (data._id && typeof data._id === 'string') return data._id;
  if (data.data?.chatId && typeof data.data.chatId === 'string') return data.data.chatId;
  
  // Convert non-string IDs to strings if possible
  if (data.chatId) return String(data.chatId);
  if (data._id) return String(data._id);
  if (data.data?.chatId) return String(data.data.chatId);
  
  return null;
};

const ChatScreen = () => {
  const route = useRoute<RouteProp<RootStackParamList, 'Chat'>>();
  const navigation = useNavigation<NativeStackNavigationProp<RootStackParamList>>();
  const { chatId, bookingId } = route.params;
  const [chatData, setChatData] = useState<ChatData | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [message, setMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const [sending, setSending] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const [userTyping, setUserTyping] = useState(false);
  const [typingTimeout, setTypingTimeout] = useState<NodeJS.Timeout | null>(null);
  const flatListRef = useRef<FlatList>(null);
  const socketConnected = useRef(false);
  
  /**
   * Enhanced function to join a chat room with better error handling and retry mechanism
   */
  const joinChatRoomEnhanced = async (chatId: string, bookingId: string): Promise<boolean> => {
    try {
      console.log(`Attempting enhanced join with chatId: ${chatId}, bookingId: ${bookingId}`);
      
      // Show loading indicator
      setLoading(true);
      
      // Use the enhanced join function with progress reporting
      const joinResult = await socketService.enhancedJoinChatRoom(
        chatId, 
        bookingId,
        {
          timeout: 8000, // 8 second timeout for UI responsiveness
          retryCount: 2,  // Try twice within the timeout
          onProgress: (status: string) => {
            console.log(`Chat join progress: ${status}`);
          }
        }
      );
      
      // Hide loading indicator
      setLoading(false);
      
      if (joinResult.success) {
        console.log('Successfully joined chat room');
        return true;
      } else {
        console.warn('Chat room join failed:', joinResult.error);
        
        // Start multiple background retries with increasing delays
        [3000, 7000, 15000].forEach((delay, index) => {
          setTimeout(() => {
            console.log(`Background retry ${index + 1} for chat room join...`);
            socketService.enhancedJoinChatRoom(chatId, bookingId, {
              timeout: 10000,
              retryCount: 1
            })
            .then(retryResult => {
              console.log(`Background retry ${index + 1} result:`, retryResult);
              if (retryResult.success) {
                // Refresh messages to ensure we have the latest
                loadMessages();
              }
            })
            .catch(error => {
              console.error(`Background retry ${index + 1} failed:`, error);
            });
          }, delay);
        });
        
        return false;
      }
    } catch (error) {
      console.error('Error in enhanced join:', error);
      setLoading(false);
      return false;
    }
  };
  const [userId, setUserId] = useState<string | null>(null);
  const [astrologerId, setAstrologerId] = useState<string | null>(null);
  const [currentChatId, setCurrentChatId] = useState<string | null>(null);
  const [currentBookingId, setCurrentBookingId] = useState<string | null>(null);
  const sentMessages = useRef(new Set());

  // Initialize IDs from route params
  useEffect(() => {
    if (route.params?.chatId) {
      setCurrentChatId(route.params.chatId);
    }
    if (route.params?.bookingId) {
      setCurrentBookingId(route.params.bookingId);
    }
  }, [route.params?.chatId, route.params?.bookingId]);

  // Function to get the astrologer ID
  const getAstrologerId = async () => {
    try {
      // First try to get from profile in AsyncStorage
      const astrologerProfileString = await AsyncStorage.getItem('astrologerProfile');
      if (astrologerProfileString) {
        const profile = JSON.parse(astrologerProfileString);
        if (profile && profile._id) {
          return profile._id;
        }
      }

      // Fallback to direct astrologerId in AsyncStorage
      const directId = await AsyncStorage.getItem('astrologerId');
      if (directId) {
        return directId;
      }

      // Last resort - get from userData if available
      const userDataString = await AsyncStorage.getItem('userData');
      if (userDataString) {
        const userData = JSON.parse(userDataString);
        if (userData && (userData.astrologerId || userData._id)) {
          return userData.astrologerId || userData._id;
        }
      }

      throw new Error('Could not determine astrologer ID');
    } catch (err) {
      console.error('Error getting astrologer ID:', err);
      return null;
    }
  };

  // Connect to socket for this chat
  const connectToSocket = useCallback(async () => {
    if (isConnecting || isConnected) return;
    
    try {
      setIsConnecting(true);
      console.log('Connecting to socket...');
      
      // Connect to socket server
      const socket = await socketService.connectSocket();
      if (!socket) {
        throw new Error('Failed to connect to socket server');
      }
      
      socketConnected.current = true;
      console.log('Socket connected successfully, now joining chat room');
      
      const joinChat = async () => {
        try {
          const chatIdToUse = currentChatId || route.params?.chatId;
          const bookingIdToUse = currentBookingId || route.params?.bookingId;
          
          console.log(`Attempting to join chat room with ID: ${chatIdToUse}`);
          
          // Setup socket event listeners first, so we don't miss any messages
          setupSocketListeners();
          
          // Try joining with both IDs if available
          if (chatIdToUse && bookingIdToUse) {
            console.log(`Trying to join with both chat ID (${chatIdToUse}) and booking ID (${bookingIdToUse})`);
            const joinResult = await socketService.joinChatRoom(chatIdToUse, bookingIdToUse);
            
            if (joinResult.success) {
              console.log('Successfully joined chat room with both IDs');
              return;
            }
            console.log('Failed to join with both IDs, will try individual approaches');
          }
          
          // Try with chat ID only if available
          if (chatIdToUse) {
            console.log(`Trying to join with chat ID only: ${chatIdToUse}`);
            const chatOnlyResult = await socketService.joinChatRoom(chatIdToUse, '');
            
            if (chatOnlyResult.success) {
              console.log('Successfully joined chat room with chat ID only');
              return;
            }
            console.log('Failed to join with chat ID only');
          }
          
          // Try with booking ID only if available and different from chat ID
          if (bookingIdToUse && bookingIdToUse !== chatIdToUse) {
            console.log(`Trying to join with booking ID only: ${bookingIdToUse}`);
            const bookingOnlyResult = await socketService.joinChatRoom('', bookingIdToUse);
            
            if (bookingOnlyResult.success) {
              console.log('Successfully joined chat room with booking ID only');
              return;
            }
            console.log('Failed to join with booking ID only');
          }
          
          // If we get here, all join attempts failed
          console.warn('All chat room join attempts failed. Will retry in background.');
          
          // Schedule a retry in the background
          setTimeout(async () => {
            try {
              console.log('Retrying chat room join in background...');
              await socketService.joinChatRoom(chatIdToUse, bookingIdToUse);
            } catch (retryError) {
              console.error('Background chat room join retry failed:', retryError);
            }
          }, 3000);
        } catch (error) {
          console.error('Error joining chat:', error);
          // Setup socket listeners anyway to ensure we can receive messages
          setupSocketListeners();
        }
      };
      
      await joinChat();
      
      setIsConnected(true);
    } catch (err) {
      console.error('Error connecting to socket:', err);
      Alert.alert(
        'Connection Error',
        'Failed to connect to chat server. Please check your internet connection and try again.',
        [{ text: 'OK' }]
      );
    } finally {
      setIsConnecting(false);
    }
  }, [isConnected, isConnecting, currentChatId, currentBookingId, route.params?.chatId, route.params?.bookingId]);

  // Setup socket event listeners for real-time chat
  const setupSocketListeners = async () => {
    // Don't set up listeners if socket is not available
    if (!socketService.isSocketConnected()) {
      console.log('Cannot setup listeners - socket not connected');
      return;
    }
    
    const socket = await socketService.connectSocket();
    if (!socket) return;
    
    console.log('Setting up socket event listeners');
    
    // Clean up existing listeners first to prevent duplicates
    const cleanup = async () => {
      console.log('Removing existing socket listeners to prevent duplicates');
      socket.off('chat:newMessage');
      socket.off('chat:typing');
      socket.off('chat:messagesRead');
      socket.off('chat:error');
      socket.off('chat:joined');
    };
    
    await cleanup();
    
    // Set up new listeners
    socket.on('chat:joined', (data) => {
      console.log('Successfully joined chat room:', data);
      
      // If we have a chatId in the response but not in our route params, update the route
      if (data && data.roomId && data.roomId !== route.params.chatId) {
        console.log(`Updating route params with new chat ID from socket: ${data.roomId}`);
        navigation.setParams({ 
          chatId: data.roomId, 
          bookingId: route.params.bookingId 
        });
      }
    });
    
    socket.on('chat:newMessage', (data) => {
      console.log('New message received from socket:', data);
      if (!data || !data.message) {
        console.log('Received invalid message data:', data);
        return;
      }
      
      // Ensure the incoming message conforms to our Message interface
      const rawMessage = data.message as any; // Use type assertion for flexibility
      
      const formattedMessage: Message = {
        _id: rawMessage._id || `temp_${Date.now()}`,
        message: typeof rawMessage.message === 'string' ? rawMessage.message : 
                (typeof rawMessage.content === 'string' ? rawMessage.content : 
                 JSON.stringify(rawMessage)),
        timestamp: rawMessage.timestamp || rawMessage.createdAt || new Date(),
        senderType: rawMessage.senderType || 'user',
        read: rawMessage.read || false,
        sender: rawMessage.sender,
        temporaryId: rawMessage.temporaryId
      };
      
      // Only add the message if we could extract message text
      if (formattedMessage.message) {
        setMessages(prevMessages => [...prevMessages, formattedMessage]);
        
        // Auto-scroll to bottom on new message
        setTimeout(() => {
          flatListRef.current?.scrollToEnd({ animated: true });
        }, 100);
        
        // Mark messages as read if they're from user
        if (formattedMessage.senderType === 'user' && route.params.chatId) {
          console.log('Marking user message as read');
          socket.emit('chat:markRead', { chatId: route.params.chatId });
        }
      } else {
        console.error('Could not extract message text from incoming socket message:', data.message);
      }
    });
    
    socket.on('chat:typing', (data) => {
      console.log('Typing event received:', data);
      if (data.userType === 'user') {
        setUserTyping(data.isTyping);
      }
    });
    
    socket.on('chat:messagesRead', (data) => {
      console.log('Messages read event received:', data);
      // Update messages read status
      setMessages(prevMessages => 
        prevMessages.map(msg => 
          msg.senderType === 'astrologer' && !msg.read 
            ? { ...msg, read: true } 
            : msg
        )
      );
    });
    
    socket.on('chat:error', (error) => {
      console.error('Chat error from server:', error);
      Alert.alert('Chat Error', error.message || 'An error occurred with the chat connection');
    });
    
    return cleanup;
  };

  const ensureChatExists = async (bookingId: string) => {
    if (!bookingId) {
      console.error('No booking ID provided for chat creation');
      Alert.alert('Error', 'Invalid booking ID');
      return;
    }

    try {
      console.log(`Ensuring chat exists for booking ${bookingId}`);
      let chatData = null;
      
      // First try to get existing chat
      try {
        chatData = await chatService.getChatByBookingId(bookingId);
        if (chatData && chatData._id) {
          console.log(`Found existing chat: ${chatData._id}`);
          // Extract chat ID and update route params
          const extractedChatId = chatData._id;
          setCurrentChatId(extractedChatId);
          setCurrentBookingId(bookingId);
          navigation.setParams({ chatId: extractedChatId, bookingId: bookingId });
          
          // Set chat data and messages
          setChatData(chatData);
          setMessages(chatData.messages || []);
          
          // Mark messages as read
          await chatService.markMessagesAsRead(extractedChatId, bookingId);
          
          // Join chat room with both IDs
          try {
            console.log('Attempting to join chat room with extracted chat ID and booking ID');
            const joinResult = await socketService.joinChatRoom(extractedChatId, bookingId);
            
            if (!joinResult.success) {
              console.warn('Initial chat room join failed, will retry in background');
              // Continue anyway - we'll retry joining in the background
              setTimeout(async () => {
                try {
                  console.log('Retrying chat room join in background...');
                  await socketService.joinChatRoom(extractedChatId, bookingId);
                } catch (retryError) {
                  console.error('Background chat room join retry failed:', retryError);
                }
              }, 2000);
            } else {
              console.log('Successfully joined chat room on first attempt');
            }
          } catch (joinError) {
            console.error('Error joining chat room:', joinError);
            // Continue anyway - we'll show the UI and messages can still be sent via HTTP
          }
          return;
        }
      } catch (error) {
        console.log('No existing chat found or error fetching chat, will create new one');
      }
      
      // If no existing chat, create one using createOrGetChat function
      try {
        console.log(`Creating new chat for booking ${bookingId}`);
        const newChat = await chatService.createOrGetChat(bookingId);
        
        // Improved chat ID extraction logic
        let extractedChatId = null;
        
        if (newChat && newChat._id) {
          extractedChatId = newChat._id;
          console.log(`Found chat ID directly in newChat._id: ${extractedChatId}`);
        } else if (newChat && newChat.data && newChat.data._id) {
          extractedChatId = newChat.data._id;
          console.log(`Found chat ID in newChat.data._id: ${extractedChatId}`);
        } else if (newChat && newChat.chatId) {
          extractedChatId = newChat.chatId;
          console.log(`Found chat ID in newChat.chatId: ${extractedChatId}`);
        }
        
        if (extractedChatId) {
          console.log(`Created new chat: ${extractedChatId}`);
          // Update route params
          setCurrentChatId(extractedChatId);
          setCurrentBookingId(bookingId);
          navigation.setParams({ chatId: extractedChatId, bookingId: bookingId });
          
          // Set chat data and messages
          setChatData(newChat.data || newChat);
          setMessages((newChat.data?.messages || newChat.messages || []));
          
          // Join chat room with both IDs
          try {
            console.log('Attempting to join chat room with extracted chat ID and booking ID');
            const joinResult = await socketService.joinChatRoom(extractedChatId, bookingId);
            
            if (!joinResult.success) {
              console.warn('Initial chat room join failed, will retry in background');
              // Continue anyway - we'll retry joining in the background
              setTimeout(async () => {
                try {
                  console.log('Retrying chat room join in background...');
                  await socketService.joinChatRoom(extractedChatId, bookingId);
                } catch (retryError) {
                  console.error('Background chat room join retry failed:', retryError);
                }
              }, 2000);
            } else {
              console.log('Successfully joined chat room on first attempt');
            }
          } catch (joinError) {
            console.error('Error joining chat room:', joinError);
            // Continue anyway - we'll show the UI and messages can still be sent via HTTP
          }
          
          // Wait a moment before trying to mark messages as read
          await new Promise(resolve => setTimeout(resolve, 500));
          try {
            await chatService.markMessagesAsRead(extractedChatId, bookingId);
          } catch (markError) {
            console.error('Error marking messages as read:', markError);
            // Continue anyway - this is not critical
          }
          
          return;
        } else {
          console.error('Created chat but no ID returned');
          console.error('Chat creation response:', JSON.stringify(newChat, null, 2));
          Alert.alert(
            'Error',
            'Failed to create chat - no ID returned. Please try again or contact support if the issue persists.'
          );
        }
      } catch (chatError: any) {
        console.error('Error creating chat:', chatError);
        if (chatError.response) {
          console.error('Response data:', chatError.response.data);
          console.error('Response status:', chatError.response.status);
        }
        Alert.alert(
          'Error',
          'Failed to create chat. Please try again or contact support if the issue persists.'
        );
      }
    } catch (error: any) {
      console.error('Error ensuring chat exists:', error);
      if (error.response) {
        console.error('Response data:', error.response.data);
        console.error('Response status:', error.response.status);
      }
      Alert.alert(
        'Error',
        'Failed to create or join chat. Please try again or contact support if the issue persists.'
      );
    }
  };

  const loadMessages = async () => {
    if (!currentChatId) return;
    
    try {
      setLoading(true);
      
      // Check if the ID looks like a booking ID (not a proper MongoDB ObjectId)
      const isLikelyBookingId = !currentChatId.match(/^[0-9a-fA-F]{24}$/);
      
      if (isLikelyBookingId && currentBookingId) {
        console.log('Current chat ID appears to be a booking ID, ensuring chat exists first');
        await ensureChatExists(currentBookingId);
        return; // The chat creation process will trigger another load
      }
      
      console.log(`Loading messages for chat ID: ${currentChatId}`);
      const messages = await chatService.getMessages(currentChatId, currentBookingId || undefined);
      setMessages(messages);
      
      // Connect to socket after successful message load
      if (!isConnected && !isConnecting) {
        connectToSocket();
      }
    } catch (error) {
      console.error('Error loading messages:', error);
      setError('Failed to load messages. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  // Update the useEffect for loading messages
  useEffect(() => {
    let mounted = true;
    
    const initializeChat = async () => {
      try {
        // If we have a booking ID but no chat ID, ensure chat exists first
        if (currentBookingId && (!currentChatId || currentChatId === currentBookingId)) {
          console.log('No valid chat ID, creating chat from booking ID');
          await ensureChatExists(currentBookingId);
          return; // Chat creation will trigger another load
        }
        
        // Only load messages if we have a valid chat ID
        if (currentChatId && mounted) {
          await loadMessages();
        }
      } catch (error) {
        console.error('Error initializing chat:', error);
      }
    };
    
    initializeChat();
    
    // Cleanup function
    return () => {
      mounted = false;
      if (socketService.isSocketConnected()) {
        const cleanup = async () => {
          const socket = await socketService.connectSocket();
          if (socket) {
            socket.off('chat:newMessage');
            socket.off('chat:typing');
            socket.off('chat:messagesRead');
            socket.off('chat:error');
          }
        };
        cleanup();
      }
    };
  }, [currentChatId, currentBookingId]); // Only depend on chat and booking IDs

  // Keep the auto-scroll effect
  useEffect(() => {
    if (messages.length > 0) {
      setTimeout(() => {
        flatListRef.current?.scrollToEnd({ animated: false });
      }, 100);
    }
  }, [messages]);

  const handleSendMessage = async (messageText: string) => {
    if (!messageText.trim()) return;
    
    // Clear the input field immediately for better UX
    setMessage('');
    
    // Generate a unique ID for this message attempt
    const uniqueAttemptId = `${Date.now()}-${messageText.substring(0, 10)}`;
    
    // Check if we've already tried sending this message recently (debounce)
    if (sentMessages.current.has(uniqueAttemptId)) {
      console.log('Duplicate message send attempt detected and prevented');
      return;
    }
    
    // Add to sent messages cache
    sentMessages.current.add(uniqueAttemptId);
    
    // Clear old entries from the cache (prevent memory leaks)
    if (sentMessages.current.size > 20) {
      const values = Array.from(sentMessages.current.values());
      sentMessages.current.delete(values[0]);
    }
    
    try {
      setSending(true);
      
      // Generate a temporary ID for optimistic update
      const tempMsgId = uuidv4();
      
      // Create a temporary message to show immediately in the UI
      const tempMessage: Message = {
        _id: tempMsgId,
        message: messageText,
        timestamp: new Date(),
        senderType: 'astrologer',
        read: false,
        temporaryId: tempMsgId // Mark as temporary
      };
      
      // Get the booking ID and chat ID to use
      const bookingIdToUse = currentBookingId || route.params?.bookingId;
      const chatIdToUse = currentChatId || chatId;
      
      if (!chatIdToUse && !bookingIdToUse) {
        console.error('No chatId or bookingId available for sending message');
        Alert.alert('Error', 'Cannot send message - missing chat information');
        setSending(false);
        return;
      }
      
      console.log(`Sending message to chat ${chatIdToUse} for booking ${bookingIdToUse}`);
      
      // Add the message to the UI immediately for better UX
      setMessages(prev => [
        ...prev, 
        tempMessage
      ]);
      
      // Scroll to the bottom to show the new message
      setTimeout(() => {
        flatListRef.current?.scrollToEnd({ animated: true });
      }, 100);
      
      try {
        // Send the message using the service
        const result = await chatService.sendMessage(
          chatIdToUse,
          messageText,
          'text',
          bookingIdToUse
        );
        
        console.log('Message sent successfully', result);
        
        // Replace the temporary message with the real one from the server if available
        if (result.data && result.data._id) {
          setMessages(prev => prev.map(msg => 
            (msg._id === tempMsgId) ? { ...result.data } : msg
          ));
        }
      } catch (error) {
        console.error('Error sending message:', error);
        
        // Show error to user
        Alert.alert(
          'Error Sending Message',
          'Failed to send your message. Please try again.'
        );
        
        // Remove the temporary message since it failed to send
        setMessages(prev => prev.filter(msg => msg._id !== tempMsgId));
      } finally {
        setSending(false);
      }
    } catch (error) {
      console.error('Error sending message:', error);
      
      // Show error to user
      Alert.alert(
        'Message Failed',
        'Your message could not be sent. Please try again.',
        [{ text: 'OK' }]
      );
      
      // Remove the failed temporary message
      setMessages(prevMessages => 
        prevMessages.filter(msg => !msg.temporaryId)
      );
    }
  };

  // Handle typing indication
  const handleTyping = () => {
    // Don't send typing events if we're not connected
    if (!isConnected) return;
    
    // Get the current chat ID from route params
    const currentChatId = route.params.chatId;
    if (!currentChatId) return;
    
    // If we already have a timeout, clear it
    if (typingTimeout) {
      clearTimeout(typingTimeout);
    }
    
    // Get socket instance
    socketService.connectSocket().then(socket => {
      if (!socket) return;
      
      // Emit typing event
      socket.emit('chat:typing', {
        chatId: currentChatId,
        isTyping: true
      });
      
      // Set a timeout to stop typing after 2 seconds
      const timeout = setTimeout(() => {
        // Emit stop typing event
        socket?.emit('chat:typing', {
          chatId: currentChatId,
          isTyping: false
        });
      }, 2000);
      
      setTypingTimeout(timeout);
    });
  };

  const renderMessage = ({ item: msg }: { item: Message }) => {
    // Safely handle undefined values
    if (!msg) return null;
    
    const isAstrologer = msg.senderType === 'astrologer';
    const isSystem = msg.senderType === 'system';
    
    // Safely handle timestamp - ensure it's a valid Date object
    let timestamp: Date;
    try {
      if (msg.timestamp instanceof Date) {
        timestamp = msg.timestamp;
      } else if (typeof msg.timestamp === 'number') {
        timestamp = new Date(msg.timestamp);
      } else if (typeof msg.timestamp === 'string') {
        timestamp = new Date(msg.timestamp);
      } else {
        timestamp = new Date();
      }
    } catch (e) {
      timestamp = new Date();
    }
    
    return (
      <View style={[
        styles.messageContainer,
        isAstrologer ? styles.astrologerMessage : styles.userMessage,
        isSystem && styles.systemMessage
      ]}>
        <Text style={[
          styles.messageText,
          isAstrologer ? styles.astrologerMessageText : styles.userMessageText,
          isSystem && styles.systemMessageText
        ]}>
          {msg.message || ''}
        </Text>
        <View style={styles.messageFooter}>
          <Text style={[
            styles.timestamp,
            isAstrologer ? styles.astrologerTimestamp : styles.userTimestamp
          ]}>
            {formatDistanceToNow(timestamp, { addSuffix: true })}
          </Text>
          {isAstrologer && (
            <Ionicons 
              name={msg.read ? "checkmark-done" : "checkmark"} 
              size={16} 
              color={isAstrologer ? "#8e8e8e" : "#ffffff"} 
            />
          )}
        </View>
      </View>
    );
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#7854F7" />
        <Text style={styles.loadingText}>Loading chat...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.errorContainer}>
        <Ionicons name="alert-circle-outline" size={48} color="#FF6B6B" />
        <Text style={styles.errorText}>{error}</Text>
        <TouchableOpacity style={styles.retryButton} onPress={loadMessages}>
          <Text style={styles.retryButtonText}>Retry</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <KeyboardAvoidingView
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      style={styles.container}
    >
      <View style={styles.header}>
        <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
          <Ionicons name="arrow-back" size={24} color="#333" />
        </TouchableOpacity>
        <View style={styles.headerInfo}>
          <Text style={styles.headerTitle}>{chatData?.user?.name || 'Chat'}</Text>
          <Text style={styles.headerSubtitle}>
            {userTyping ? 'typing...' : (isConnected ? 'online' : 'offline')}
          </Text>
        </View>
      </View>

      {/* Connection Status */}
      {isConnecting && (
        <View style={styles.connectionStatus}>
          <Text style={styles.connectionStatusText}>Connecting to chat...</Text>
        </View>
      )}

      {!isConnected && !isConnecting && (
        <TouchableOpacity style={styles.connectionError} onPress={connectToSocket}>
          <Text style={styles.connectionErrorText}>
            Disconnected from chat. Tap to reconnect.
          </Text>
        </TouchableOpacity>
      )}

      <FlatList
        ref={flatListRef}
        data={messages}
        renderItem={renderMessage}
        keyExtractor={(item) => {
          // Handle case where _id might be undefined or null
          if (!item || !item._id) {
            // Use temporaryId if available, otherwise use a timestamp-based fallback
            if (item.temporaryId) {
              return item.temporaryId;
            }
            
            // Create a fallback ID using timestamp if available
            let timestampValue = Date.now();
            if (item.timestamp) {
              if (item.timestamp instanceof Date) {
                timestampValue = item.timestamp.getTime();
              } else if (typeof item.timestamp === 'number') {
                timestampValue = item.timestamp;
              }
            }
            
            return `msg_${timestampValue}_${Math.random().toString(36).substring(2, 9)}`;
          }
          return item._id.toString();
        }}
        contentContainerStyle={styles.messagesList}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyText}>No messages yet</Text>
          </View>
        }
        onContentSizeChange={() => flatListRef.current?.scrollToEnd({ animated: false })}
      />

      {userTyping && (
        <View style={[styles.messageContainer, styles.userMessage, styles.typingIndicator]}>
          <View style={styles.typingDots}>
            <View style={styles.typingDot} />
            <View style={[styles.typingDot, styles.typingDotMiddle]} />
            <View style={styles.typingDot} />
          </View>
        </View>
      )}

      <View style={styles.inputContainer}>
        <TextInput
          style={styles.input}
          placeholder="Type a message..."
          value={message}
          onChangeText={(text) => {
            setMessage(text);
            handleTyping();
          }}
          multiline
        />
        <TouchableOpacity
          style={[
            styles.sendButton,
            (!message.trim() || sending) && styles.sendButtonDisabled
          ]}
          onPress={() => handleSendMessage(message)}
          disabled={!message.trim() || sending || !isConnected}
        >
          {sending ? (
            <ActivityIndicator size="small" color="#fff" />
          ) : (
            <Ionicons name="send" size={20} color="#fff" />
          )}
        </TouchableOpacity>
      </View>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E5E5',
  },
  backButton: {
    padding: 8,
  },
  headerInfo: {
    marginLeft: 16,
    flex: 1,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  headerSubtitle: {
    fontSize: 14,
    color: '#666',
  },
  connectionStatus: {
    backgroundColor: '#FFEDBA',
    padding: 8,
    alignItems: 'center',
  },
  connectionStatusText: {
    color: '#8B6800',
    fontSize: 14,
  },
  connectionError: {
    backgroundColor: '#FFBABA',
    padding: 8,
    alignItems: 'center',
  },
  connectionErrorText: {
    color: '#D8000C',
    fontSize: 14,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5F5F5',
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#666',
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5F5F5',
    padding: 20,
  },
  errorText: {
    marginTop: 16,
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
  },
  retryButton: {
    marginTop: 16,
    paddingVertical: 8,
    paddingHorizontal: 16,
    backgroundColor: '#7854F7',
    borderRadius: 4,
  },
  retryButtonText: {
    color: '#fff',
    fontSize: 16,
  },
  messagesList: {
    padding: 16,
  },
  messageContainer: {
    maxWidth: '80%',
    padding: 12,
    borderRadius: 8,
    marginBottom: 8,
  },
  userMessage: {
    alignSelf: 'flex-start',
    backgroundColor: '#fff',
    borderBottomLeftRadius: 0,
  },
  astrologerMessage: {
    alignSelf: 'flex-end',
    backgroundColor: '#7854F7',
    borderBottomRightRadius: 0,
  },
  systemMessage: {
    alignSelf: 'center',
    backgroundColor: '#E5E5E5',
    maxWidth: '90%',
  },
  messageText: {
    fontSize: 16,
  },
  userMessageText: {
    color: '#333',
  },
  astrologerMessageText: {
    color: '#fff',
  },
  systemMessageText: {
    color: '#666',
    fontStyle: 'italic',
  },
  messageFooter: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'center',
    marginTop: 4,
  },
  timestamp: {
    fontSize: 12,
    marginRight: 4,
  },
  userTimestamp: {
    color: '#999',
  },
  astrologerTimestamp: {
    color: '#E0CFFF',
  },
  typingIndicator: {
    padding: 8,
    maxWidth: '40%',
  },
  typingDots: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    height: 20,
  },
  typingDot: {
    width: 6,
    height: 6,
    borderRadius: 3,
    backgroundColor: '#666',
    marginHorizontal: 2,
  },
  typingDotMiddle: {
    marginTop: -5,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  emptyText: {
    fontSize: 16,
    color: '#999',
    textAlign: 'center',
  },
  inputContainer: {
    flexDirection: 'row',
    padding: 8,
    backgroundColor: '#fff',
    borderTopWidth: 1,
    borderTopColor: '#E5E5E5',
  },
  input: {
    flex: 1,
    backgroundColor: '#F5F5F5',
    borderRadius: 20,
    padding: 12,
    paddingTop: 12,
    maxHeight: 100,
    fontSize: 16,
  },
  sendButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#7854F7',
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 8,
    alignSelf: 'flex-end',
  },
  sendButtonDisabled: {
    backgroundColor: '#BBBBBB',
  },
});

export default ChatScreen; 